JavaScript
	>Scope:
		Scope determines the accessibility (visibility) of variables.
		JavaScript has 3 types of scope:
		*Block scope
		*Function scope
		*Global scope

	Block Scope:
		Before ES6 (2015), JavaScript had only Global Scope and Function Scope.
		ES6 introduced two important new JavaScript keywords: let and const.
		These two keywords provide Block Scope in JavaScript.
		Variables declared inside a { } block cannot be accessed from outside the block.

	Ex.1:
		{
  		let x = 5;
		}
		// x can NOT be used here
		
		Variables declared with the var keyword can NOT have block scope.
		Variables declared inside a { } block can be accessed from outside the block.
	
	Ex.2:
		{
 		 var x = 2;
		}
		// x CAN be used here

	Function Scope:
		Each function creates a new scope.
		Variables defined inside a function are not accessible (visible) from outside the function.
		Variables declared with var, let and const are quite similar when declared inside a function.

	Ex.1:

<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Scope</h2>

<p>A GLOBAL variable can be accessed from any script or function.</p>

<p id="demo"></p>

<script>
let carName = "Volvo";
myFunction();

function myFunction() {
  document.getElementById("demo").innerHTML = "I can display " + carName;
}
</script>

</body>
</html>

	Global Scope:
		Variables declared Globally (outside any function) have Global Scope.
		Global variables can be accessed from anywhere in a JavaScript program.
		Variables declared with var, let and const are quite similar when declared outside a block.

	Ex.1:
<!DOCTYPE html>
<html>
<body>

<h2>JavaScript Global Variables</h2>
<p>If you assign a value to a variable that has not been declared, it will automatically become a GLOBAL variable:</p>

<p id="demo"></p>

<script>
myFunction();
// code here can use carName as a global variable
document.getElementById("demo").innerHTML = "I can display " + carName;

function myFunction() {
  carName = "bmw";
}
</script>

</body>
</html>

		

